diff --git a/node_modules/node-mpv/lib/mpv/_startStop.js b/node_modules/node-mpv/lib/mpv/_startStop.js
index a02a990..19df246 100644
--- a/node_modules/node-mpv/lib/mpv/_startStop.js
+++ b/node_modules/node-mpv/lib/mpv/_startStop.js
@@ -109,6 +109,12 @@ const startStop = {
 				// are usually output via stdout are output via stderr instead. That's why it's required to listen
 				// for the same messages on stderr as well
 				this.mpvPlayer.stderr.on('data', stdCallback);
+
+				if (this.options.debug || this.options.verbose) {
+					// Pipe mpv stdout/err to provide potential clues
+					this.mpvPlayer.stdout.pipe(process.stdout);
+					this.mpvPlayer.stderr.pipe(process.stderr);
+				}
 			});
 			
 			// check if mpv went into idle mode and is ready to receive commands
@@ -118,7 +124,13 @@ const startStop = {
 				// socket to check for the idle event to check if mpv fully loaded and
 				// actually running
 				const observeSocket = net.Socket();
-				observeSocket.connect({path: this.options.socket}).on('data', (data) => {
+				observeSocket.connect({path: this.options.socket}, () => {
+					// send any message to see if there's a MPV instance responding
+					observeSocket.write(JSON.stringify({
+						'command': ['get_property', 'idle-active']
+					})+'\n');
+					if (this.options.debug || this.options.verbose) console.log('[Node-MPV] sending stimulus');
+				}).on('data', (data) => {
 					// parse the messages from the socket
 					const messages = data.toString('utf-8').split('\n');
 					// check every message
@@ -127,12 +139,20 @@ const startStop = {
 						if(message.length > 0){
 							message = JSON.parse(message);
 							// check for the relevant events to see, if mpv has finished loading
-							// idle
+							// idle, idle-active (different between mpv versions)
 							//     usually if no special options were added and mpv will go into idle state
 							// file-loaded
 							//     for the rare case that somebody would pass files as input via the command line
 							//     through the constructor. In that case mpv never goes into idle mode
-							if('event' in message && ['idle','file-loaded'].includes(message.event)){
+							if('event' in message && ['idle','idle-active','file-loaded'].includes(message.event)){
+								if (this.options.debug || this.options.verbose) console.log('[Node-MPV] idling');
+								observeSocket.destroy();							
+								resolve();
+							}
+							// check our stimulus response
+							// Check for our stimulus with idle-active
+							if('data' in message && 'error' in message && message.error === 'success') {
+								if (this.options.debug || this.options.verbose) console.log('[Node-MPV] stimulus received', message.data);
 								observeSocket.destroy();
 								resolve();
 							}
@@ -160,7 +180,13 @@ const startStop = {
 		// sets the Interval to emit the current time position
 		this.observeProperty('time-pos', 0);
 		this.timepositionListenerId = setInterval(async () => {
-			const paused = await this.isPaused();
+			const paused = await this.isPaused().catch(err => {
+				if (this.options.debug) console.log('[Node-MPV] timeposition listener cannot retrieve isPaused', err);
+				if (err.code === 8) {
+					clearInterval(this.timepositionListenerId);
+					return true;
+				} else throw err; // This error is not catcheable, maybe provide a function in options to catch these
+			});
 			// only emit the time position if there is a file playing and it's not paused
 			if(!paused && this.currentTimePos != null){
 				this.emit("timeposition", this.currentTimePos);
diff --git a/node_modules/node-mpv/lib/util.js b/node_modules/node-mpv/lib/util.js
index 35d007e..0d00c5c 100644
--- a/node_modules/node-mpv/lib/util.js
+++ b/node_modules/node-mpv/lib/util.js
@@ -191,9 +191,9 @@ const util = {
 
 		// default Arguments
 		// --idle always run in the background
-		// --really-quite  no console prompts. Buffer might overflow otherwise
-		// --msg-level=ipc=v  sets IPC socket related messages to verbose
-		let defaultArgs = ['--idle', '--really-quiet', '--msg-level=ipc=v'];
+		// --msg-level=all=no,ipc=v  sets IPC socket related messages to verbose and
+		// silence all other messages to avoid buffer overflow
+		let defaultArgs = ['--idle', '--msg-level=all=no,ipc=v'];
 
 		//  audio_only option aditional arguments
 		// --no-video  no video will be displayed
