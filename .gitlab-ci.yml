image: axelterizaki/karaokemugen-ci:node-12

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  ELECTRON_CACHE: .cache/electron

workflow:
  rules:
    - if: $CI_COMMIT_TAG
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_BRANCH == "next"'

cache:
  key: km-app-${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - systempanel/node_modules/
    - frontend/node_modules/

stages:
  - schedule
  - test
  - build
  - package
  - deploy
  - release

test:
  stage: test
  retry:
    max: 2
  interruptible: true
  services:
    - postgres:12
  variables:
    POSTGRES_USER: karaokemugen_app
    POSTGRES_PASSWORD: musubi
  script:
    - yarn install --check-files --force --cache-folder .yarn
    - touch mpv
    - mkdir app
    - cp -f config.CICD.yml app/config.yml
    - cp -f database.CICD.json app/database.json
    - export LANG=en_US
    - node --version
    - node util/extUnaccent.js
    - yarn test --debug
  rules:
    - if: '$SCHEDULED_RELEASES == "true"'
      when: never
    - if: '$CI_COMMIT_MESSAGE =~ /^chore: new release/'
    - if: $CI_COMMIT_TAG
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_BRANCH == "next"'
    - when: never

build-react:
  stage: build
  interruptible: true
  artifacts:
    expire_in: 8 hours
    name: km-app-build-${CI_COMMIT_REF_SLUG}
    paths:
    - systempanel/build/
    - dist/
    - frontend/build/
  script:
    - yarn build
    - yarn installSystemPanel
    - yarn installFrontend
    - yarn buildSystemPanel
    - yarn buildFrontend
    - yarn ts-node util/sentryUpdateReleases.ts
  rules:
    - if: '$SCHEDULED_RELEASES == "true"'
      when: never
    - if: '$CI_COMMIT_MESSAGE =~ /^chore: new release/'
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_BRANCH == "next"'
    - if: $CI_COMMIT_TAG
    - when: never

pkg_linux:
  stage: package
  image: electronuserland/builder:latest
  cache:
    key: km-app-${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
      - systempanel/node_modules/
      - frontend/node_modules/
    policy: pull
  interruptible: true
  artifacts:
    name: km-app-pkglinux-${CI_COMMIT_REF_SLUG}
    paths:
      - release_linux
  dependencies:
    - build-react
  script:
    - rm -Rf release_linux
    - yarn add --dev electron-builder
    - echo $CI_COMMIT_SHORT_SHA >assets/sha.txt
    - bash util/electronBuilder.sh -l
    - ls -la packages/
    - mkdir release_linux
    - mv packages/*.deb release_linux/
    - mv packages/*.tar.gz release_linux/
    - ls -la release_linux/*
  rules:
    - if: '$SCHEDULED_RELEASES == "true"'
      when: never
    - if: '$CI_COMMIT_MESSAGE =~ /^chore: new release/'
    - if: $CI_COMMIT_TAG
    - when: never

pkg_win:
  stage: package
  image: electronuserland/builder:wine
  cache:
    key: km-app-${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
      - systempanel/node_modules/
      - frontend/node_modules/
    policy: pull
  interruptible: true
  artifacts:
    name: km-app-pkgwin-${CI_COMMIT_REF_SLUG}
    paths:
      - release_win
  dependencies:
    - build-react
  script:
    - rm -Rf release_win
    - yarn add --dev electron-builder
    - apt-get update -qq && apt-get install -y -qq zip
    - wget -qO- http://mugen.karaokes.moe/downloads/dist_win-4.x.tar.gz | tar xz
    - wget http://mugen.karaokes.moe/downloads/vcredist_x64.exe -O build/vc.exe
    - echo $CI_COMMIT_SHORT_SHA >assets/sha.txt
    - bash util/electronBuilder.sh -w
    - ls -la packages/
    - mkdir release_win
    - mv packages/*.exe release_win/
    - mv packages/*.yml release_win/
    - touch portable
    - touch disableAppUpdate
    - zip -rv packages/*.zip portable disableAppUpdate
    - mv packages/*.zip release_win/
    - ls -la release_win/*
  rules:
    #- if: '$SCHEDULED_RELEASES == "true"'
    #  when: never
    #- if: '$CI_COMMIT_MESSAGE =~ /^chore: new release/'
    #- if: $CI_COMMIT_TAG
    #- when: never

pkg_mac:
  stage: package
  cache:
    key: km-app-${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
      - systempanel/node_modules/
      - frontend/node_modules/
    policy: pull
  retry:
    max: 2
  tags:
    - macos
  interruptible: true
  artifacts:
    name: km-app-pkgmac-${CI_COMMIT_REF_SLUG}
    paths:
      - release_mac
  dependencies:
    - build-react
  variables:
    CSC_IDENTITY_AUTO_DISCOVERY: "false"
    ARTIFACT_DOWNLOAD_ATTEMPTS: 10
    RESTORE_CACHE_ATTEMPTS: 10
  script:
    - rm -Rf release_mac
    - yarn add --dev electron-builder
    - wget -qO- http://mugen.karaokes.moe/downloads/dist_mac-3.2.tar.gz | tar xvz
    - echo $CI_COMMIT_SHORT_SHA >assets/sha.txt
    - bash util/electronBuilder.sh -m
    - ls -la packages/
    - mkdir release_mac
    - mv packages/*.dmg release_mac/
    - ls -la release_mac/*
  rules:
    - if: '$SCHEDULED_RELEASES == "true"'
      when: never
    - if: '$CI_COMMIT_MESSAGE =~ /^chore: new release/'
    - if: $CI_COMMIT_TAG
    - when: never

deploy_mac:
  stage: deploy
  image: minidocks/lftp
  interruptible: true
  variables:
    GIT_STRATEGY: none
  cache: {}
  dependencies:
    - pkg_mac
  needs:
    - pkg_mac
  script:
    - ls -la release_mac/*
    - lftp -c "set cmd:fail-exit yes; set ftp:ssl-allow no; open -u $USERNAME,$PASSWORD $HOST; cd site/downloads; mput release_mac/*"
  rules:
    - if: '$SCHEDULED_RELEASES == "true"'
      when: never
    - if: '$CI_COMMIT_MESSAGE =~ /^chore: new release/'
    - if: $CI_COMMIT_TAG
    - when: never

deploy_linux:
    stage: deploy
    image: minidocks/lftp
    interruptible: true
    cache: {}
    variables:
      GIT_STRATEGY: none
    dependencies:
      - pkg_linux
    needs:
      - pkg_linux
    script:
      - ls -la release_linux/*
      - lftp -c "set cmd:fail-exit yes; set ftp:ssl-allow no; open -u $USERNAME,$PASSWORD $HOST; cd site/downloads; mput release_linux/*"
    rules:
      - if: '$SCHEDULED_RELEASES == "true"'
        when: never
      - if: '$CI_COMMIT_MESSAGE =~ /^chore: new release/'
      - if: $CI_COMMIT_TAG

deploy_win:
  stage: deploy
  image: minidocks/lftp
  interruptible: true
  variables:
    GIT_STRATEGY: none
  cache: {}
  dependencies:
    - pkg_win
  needs:
    - pkg_win
  script:
    - ls -la release_win/*
    - lftp -c "set cmd:fail-exit yes; set ftp:ssl-allow no; open -u $USERNAME,$PASSWORD $HOST; cd site/downloads; mput release_win/*"
  rules:
    - if: '$SCHEDULED_RELEASES == "true"'
      when: never
    - if: '$CI_COMMIT_MESSAGE =~ /^chore: new release/'
    - if: $CI_COMMIT_TAG
    - when: never

apidoc:
  stage: release
  interruptible: true
  dependencies: []
  cache:
    key: km-app-${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
    policy: pull
  script:
    - ./node_modules/.bin/apidoc -i src/controllers -o apidoc -t apidoc_template
    - cd apidoc
    - lftp -c "set ftp:ssl-allow no; open -u $USERNAME,$PASSWORD $HOST; mkdir -p site/apidoc/$CI_COMMIT_REF_NAME; cd site/apidoc/$CI_COMMIT_REF_NAME; mirror -Rnev --parallel=10"
  rules:
    - if: $CI_COMMIT_TAG
    - when: never

release_site:
  stage: release
  image: curlimages/curl
  interruptible: true
  dependencies: []
  cache: {}
  script:
    - sh util/triggerWebsite.sh
  rules:
    - if: '$SCHEDULED_RELEASES == "true"'
      when: never
    - if: '$CI_COMMIT_MESSAGE =~ /^chore: new release/'
    - if: $CI_COMMIT_TAG
    - when: never

weekly_releases:
  stage: schedule
  image: axelterizaki/karaokemugen-git-ssh:latest
  interruptible: true
  cache: {}
  script:
    - bash util/gitPush.sh
  rules:
# This prevents job from starting if last commit starts with a new release, which means we don't need to make a new one.
    - if: '$CI_COMMIT_MESSAGE =~ /^chore: new release/'
      when: never
    - if: '$SCHEDULED_RELEASES == "true"'
    - when: never
